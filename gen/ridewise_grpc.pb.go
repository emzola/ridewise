// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: ridewise.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RiderService_RegisterRider_FullMethodName = "/RiderService/RegisterRider"
	RiderService_GetRider_FullMethodName      = "/RiderService/GetRider"
	RiderService_UpdateRider_FullMethodName   = "/RiderService/UpdateRider"
	RiderService_DeleteRider_FullMethodName   = "/RiderService/DeleteRider"
)

// RiderServiceClient is the client API for RiderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RiderServiceClient interface {
	RegisterRider(ctx context.Context, in *RegisterRiderRequest, opts ...grpc.CallOption) (*RegisterRiderResponse, error)
	GetRider(ctx context.Context, in *GetRiderRequest, opts ...grpc.CallOption) (*GetRiderResponse, error)
	UpdateRider(ctx context.Context, in *UpdateRiderRequest, opts ...grpc.CallOption) (*UpdateRiderResponse, error)
	DeleteRider(ctx context.Context, in *DeleteRiderRequest, opts ...grpc.CallOption) (*DeleteRiderResponse, error)
}

type riderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRiderServiceClient(cc grpc.ClientConnInterface) RiderServiceClient {
	return &riderServiceClient{cc}
}

func (c *riderServiceClient) RegisterRider(ctx context.Context, in *RegisterRiderRequest, opts ...grpc.CallOption) (*RegisterRiderResponse, error) {
	out := new(RegisterRiderResponse)
	err := c.cc.Invoke(ctx, RiderService_RegisterRider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riderServiceClient) GetRider(ctx context.Context, in *GetRiderRequest, opts ...grpc.CallOption) (*GetRiderResponse, error) {
	out := new(GetRiderResponse)
	err := c.cc.Invoke(ctx, RiderService_GetRider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riderServiceClient) UpdateRider(ctx context.Context, in *UpdateRiderRequest, opts ...grpc.CallOption) (*UpdateRiderResponse, error) {
	out := new(UpdateRiderResponse)
	err := c.cc.Invoke(ctx, RiderService_UpdateRider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riderServiceClient) DeleteRider(ctx context.Context, in *DeleteRiderRequest, opts ...grpc.CallOption) (*DeleteRiderResponse, error) {
	out := new(DeleteRiderResponse)
	err := c.cc.Invoke(ctx, RiderService_DeleteRider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiderServiceServer is the server API for RiderService service.
// All implementations must embed UnimplementedRiderServiceServer
// for forward compatibility
type RiderServiceServer interface {
	RegisterRider(context.Context, *RegisterRiderRequest) (*RegisterRiderResponse, error)
	GetRider(context.Context, *GetRiderRequest) (*GetRiderResponse, error)
	UpdateRider(context.Context, *UpdateRiderRequest) (*UpdateRiderResponse, error)
	DeleteRider(context.Context, *DeleteRiderRequest) (*DeleteRiderResponse, error)
	mustEmbedUnimplementedRiderServiceServer()
}

// UnimplementedRiderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRiderServiceServer struct {
}

func (UnimplementedRiderServiceServer) RegisterRider(context.Context, *RegisterRiderRequest) (*RegisterRiderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRider not implemented")
}
func (UnimplementedRiderServiceServer) GetRider(context.Context, *GetRiderRequest) (*GetRiderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRider not implemented")
}
func (UnimplementedRiderServiceServer) UpdateRider(context.Context, *UpdateRiderRequest) (*UpdateRiderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRider not implemented")
}
func (UnimplementedRiderServiceServer) DeleteRider(context.Context, *DeleteRiderRequest) (*DeleteRiderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRider not implemented")
}
func (UnimplementedRiderServiceServer) mustEmbedUnimplementedRiderServiceServer() {}

// UnsafeRiderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RiderServiceServer will
// result in compilation errors.
type UnsafeRiderServiceServer interface {
	mustEmbedUnimplementedRiderServiceServer()
}

func RegisterRiderServiceServer(s grpc.ServiceRegistrar, srv RiderServiceServer) {
	s.RegisterService(&RiderService_ServiceDesc, srv)
}

func _RiderService_RegisterRider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRiderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiderServiceServer).RegisterRider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiderService_RegisterRider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiderServiceServer).RegisterRider(ctx, req.(*RegisterRiderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiderService_GetRider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRiderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiderServiceServer).GetRider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiderService_GetRider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiderServiceServer).GetRider(ctx, req.(*GetRiderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiderService_UpdateRider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRiderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiderServiceServer).UpdateRider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiderService_UpdateRider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiderServiceServer).UpdateRider(ctx, req.(*UpdateRiderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiderService_DeleteRider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRiderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiderServiceServer).DeleteRider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiderService_DeleteRider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiderServiceServer).DeleteRider(ctx, req.(*DeleteRiderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RiderService_ServiceDesc is the grpc.ServiceDesc for RiderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RiderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RiderService",
	HandlerType: (*RiderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterRider",
			Handler:    _RiderService_RegisterRider_Handler,
		},
		{
			MethodName: "GetRider",
			Handler:    _RiderService_GetRider_Handler,
		},
		{
			MethodName: "UpdateRider",
			Handler:    _RiderService_UpdateRider_Handler,
		},
		{
			MethodName: "DeleteRider",
			Handler:    _RiderService_DeleteRider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ridewise.proto",
}
